package com.winterchen.webservice.client.webservice.author;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.2.5
 * 2021-12-16T13:45:30.647+08:00
 * Generated source version: 3.2.5
 *
 */
@WebServiceClient(name = "authorService",
                  wsdlLocation = "classpath:wsdl/author.wsdl",
                  targetNamespace = "http://www.winterchen.com/webservice")
public class AuthorService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.winterchen.com/webservice", "authorService");
    public final static QName AuthorPortName = new QName("http://www.winterchen.com/webservice", "authorPortName");
    static {
        URL url = AuthorService.class.getClassLoader().getResource("wsdl/author.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(AuthorService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/author.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public AuthorService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AuthorService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AuthorService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public AuthorService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public AuthorService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public AuthorService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns AuthorPortType
     */
    @WebEndpoint(name = "authorPortName")
    public AuthorPortType getAuthorPortName() {
        return super.getPort(AuthorPortName, AuthorPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AuthorPortType
     */
    @WebEndpoint(name = "authorPortName")
    public AuthorPortType getAuthorPortName(WebServiceFeature... features) {
        return super.getPort(AuthorPortName, AuthorPortType.class, features);
    }

}
